#!/bin/bash
# Script to built arm toolchain: binutils, gcc, newlib, gdb
# Automatically download versions needed for building if needed
#
# If mpc, mpfr, gmp are no needed just comment them and they
# won't be compiled in toolchain

#-------------------------------------------------------------------------------
# settings
#-------------------------------------------------------------------------------

TARGET="arm-none-eabi"
SRC="$HOME/arm-toolchain-sources"
OUT="$HOME/opt/arm-none-eabi"

BINUTILS=binutils-2.22
GCC=gcc-4.6.2
NEWLIB=newlib-1.19.0

#if not set it will not be assembled
GMP=gmp-4.2
#GMP=gmp-5.0.1
MPFR=mpfr-2.3.1
#MPFR=mpfr-3.0.0
MPC=mpc-0.8
#MPC=mpc-0.8.2
#GDB=gdb-6.8

THREADS=6

GMP_OPT="-bla-bla"
MPFR_OPT="-bla-bla"
MPC_OPT="-bla-bla"

#-------------------------------------------------------------------------------
# downloading
#-------------------------------------------------------------------------------

mkdir -vp $SRC
cd $SRC

echo
echo "Downloading source packages. This may take a while."
echo

# if already present don't download
if ! [ -f "$BINUTILS/install-sh" -o -f "$BINUTILS.tar.bz2" ]; then
	echo; echo "Downloading the binutils ..."; echo
	wget -c http://ftp.gnu.org/gnu/binutils/$BINUTILS.tar.bz2 || exit 1
fi

if ! [ -f "$GCC/install-sh" -o -f "$GCC.tar.bz2" ]; then
	echo; echo "Downloading the gcc ..."; echo
	wget -c ftp://ftp.gnu.org/gnu/gcc/$GCC/$GCC.tar.bz2 || exit 1
fi

if [ "$GMP" != "" ]; then
	if ! [ -f "$GMP/install-sh" -o -f "$GMP.tar.bz2" ]; then
		echo; echo "Downloading the gmp ..."; echo
		wget -c ftp://ftp.gmplib.org/pub/$GMP/$GMP.tar.bz2 || exit 1
	fi
fi

if [ "$MPFR" != "" ]; then
	if ! [ -f "$MPFR/install-sh" -o -f "$MPFR.tar.bz2" ]; then
		echo; echo "Downloading the mpfr ..."; echo
		wget -c http://mpfr.loria.fr/$MPFR/$MPFR.tar.bz2 || exit 1
	fi
fi

if [ "$MPC" != "" ]; then
	if ! [ -f "$MPC/install-sh" -o -f "$MPC.tar.gz" ]; then
		echo; echo "Downloading the mpc ..."; echo
		wget -c http://www.multiprecision.org/mpc/download/$MPC.tar.gz \
		|| exit 1
	fi
fi

if ! [ -f "$NEWLIB/install-sh" -o -f "$NEWLIB.tar.gz" ]; then
	echo; echo "Downloading the newlib ..."; echo
	wget -c ftp://sources.redhat.com/pub/newlib/$NEWLIB.tar.gz || exit 1
fi

if [ "$GDB" != "" ]; then
	if ! [ -f "$GDB/install-sh" -o -f "$GDB.tar.bz2" ]; then
		echo; echo "Downloading the gdb ..."; echo
		wget -c ftp://ftp.gnu.org/gnu/gdb/$GDB.tar.bz2 || exit 1
	fi
fi

echo
echo "All packeges are present"
echo

#-------------------------------------------------------------------------------
# building
#-------------------------------------------------------------------------------

echo "Starting Build..."
echo

rm -rf build/*
mkdir -vp build

#-------------------------------------------------------------------------------
# binutils
#-------------------------------------------------------------------------------

echo
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo ": Building binutils"
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo

if ! [ -f "$SRC/$BINUTILS/install-sh" ]; then
	echo; echo "Extracting binutils, waite a while"; echo
	if ( tar xfj $SRC/$BINUTILS.tar.bz2 ) then
		echo -n
	else
		echo; echo "Error: Cannot extract binutils"; echo
		exit 1
	fi
fi

cd build
if ( ../$BINUTILS/configure --target=$TARGET --prefix=$OUT \
     --disable-interwork --enable-multilib --with-gnu-as \
     --with-gnu-ld --disable-nls --disable-werror ) then
	echo -n
else
	echo; echo "Error: Cannot configure binutils"; echo
	exit 1
fi

if ( make -j$THREADS ) then
	echo -n
else
	echo; echo "Error: Cannot make binutils"; echo
	exit 1
fi

if ( make install ) then
	echo -n
else
	echo; echo "Error: Cannot install binutils"; echo
	exit 1
fi

cd ..
rm -rf build/*

# the compiler math prereqs
#-------------------------------------------------------------------------------
# gmp
#-------------------------------------------------------------------------------

if [ "$GMP" != "" ]; then
	echo
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo ": Building gmp"
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo

	if ! [ -f "$GMP/install-sh" ]; then
		echo; echo "Extracting gmp, waite a while"; echo
		if ( tar -jxf $SRC/$GMP.tar.bz2 ) then
			echo -n
		else
			echo; echo "Error: Cannot extract gmp"; echo
			exit 1
		fi
	fi

	rm -rf build_gmp/*
	mkdir -vp build_gmp
	cd build
	if ( ../$GMP/configure --prefix=$SRC/build_gmp --disable-shared \
		--enable-static ) then
		echo -n
	else
		echo; echo "Error: Cannot configure gmp"; echo
		exit 1
	fi

	if ( make -j$THREADS ) then
		echo -n
	else
		echo; echo "Error: Cannot make gmp"; echo
		exit 1
	fi

	if ( make install ) then
		echo -n
	else
		echo; echo "Error: Cannot install gmp"; echo
		exit 1
	fi

	cd ..
	rm -rf build/*
	GMP_OPT="--with-gmp=$SRC/build_gmp"
fi

#-------------------------------------------------------------------------------
# mpfr
#-------------------------------------------------------------------------------

if [ "$MPFR" != "" ]; then
	echo
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo ": Building pmfr"
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo

	if ! [ -f "$MPFR/install-sh" ]; then
		echo; echo "Extracting mpfr, waite a while"; echo
		if ( tar -jxf $SRC/$MPFR.tar.bz2 ) then
			echo -n
		else
			echo; echo "Error: Cannot extract mpfr"; echo
			exit 1
		fi
	fi

	rm -rf build_mpfr/*
	mkdir -vp build_mpfr
	cd build
	if ( ../$MPFR/configure --prefix=$SRC/build_mpfr \
	     $GMP_OPT --disable-shared --enable-static ) then
		echo -n
	else
		echo; echo "Error: Cannot configure mpfr"; echo
		exit 1
	fi

	if ( make -j$THREADS ) then
		echo -n
	else
		echo; echo "Error: Cannot make mpfr"; echo
		exit 1
	fi

	if ( make install ) then
		echo -n
	else
		echo; echo "Error: Cannot install mpfr"; echo
		exit 1
	fi

	cd ..
	rm -rf build/*
	MPFR_OPT="--with-mpfr=$SRC/build_mpfr"
fi

#-------------------------------------------------------------------------------
# mpc
#-------------------------------------------------------------------------------

if [ "$MPC" != "" ]; then
	echo
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo ": Building mpc"
	echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
	echo

	if ! [ -f "$MPC/install-sh" ]; then
		echo; echo "Extracting mpc, waite a while"; echo
		if ( tar -zxf $SRC/$MPC.tar.gz ) then
			echo -n
		else
			echo; echo "Error: Cannot extract mpc"; echo
			exit 1
		fi
	fi

	rm -rf build_mpc/*
	mkdir -vp build_mpc
	cd build
	if ( ../$MPC/configure --prefix=$SRC/build_mpc \
	     $GMP_OPT $MPFR_OPT --disable-shared --enable-static ) then
		echo -n
	else
		echo; echo "Error: Cannot configure mpc"; echo
		exit 1
	fi

	if ( make -j$THREADS ) then
		echo -n
	else
		echo; echo "Error: Cannot make mpc"; echo
		exit 1
	fi

	if ( make install ) then
		echo -n
	else
		echo; echo "Error: Cannot install mpc"; echo
		exit 1
	fi

	cd ..
	rm -rf build/*
	MPC_OPT="--with-mpc=$SRC/build_mpc"
fi

#-------------------------------------------------------------------------------
# gcc pass 1
#-------------------------------------------------------------------------------

echo
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo ": Building GCC pass 1"
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo

if ! [ -f "$SRC/$GCC/install-sh" ]; then
	echo; echo "Extracting gcc"; echo
	if ( tar xfj $SRC/$GCC.tar.bz2 ) then
		echo -n
	else
		echo; echo "Error: Cannot extract gcc, waite a while"; echo
		exit 1
	fi
fi

cd build

if ( ../$GCC/configure --target=$TARGET --prefix=$OUT --enable-interwork \
     --enable-multilib --enable-languages="c" --with-newlib \
     --without-headers --disable-shared --disable-nls --disable-threads --with-gnu-as \
     --with-gnu-ld $GMP_OPT $MPFR_OPT $MPC_OPT) then
	echo -n
else
	echo; echo "Error: Cannot configure gcc"; echo
	exit 1
fi

if ( make -j$THREADS all-gcc ) then
	echo -n
else
	echo; echo "Error: Cannot compile all-gcc"; echo
	exit 1
fi

if ( make install-gcc ) then
	echo -n
else
	echo; echo "Error: Cannot install-gcc"; echo
	exit 1
fi

cd ..
rm -rf build/*
rm -rf build_gmp
rm -rf build_mpc
rm -rf build_mpfr

#-------------------------------------------------------------------------------
# newlib
#-------------------------------------------------------------------------------

echo
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo ": Building newlib"
echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
echo

if ! [ -f "$SRC/$NEWLIB/install-sh" ]; then
	echo; echo "Extracting newlib"; echo
	if ( tar xfz $SRC/$NEWLIB.tar.gz ) then
		echo -n
	else
		echo; echo "Error: Cannot extract newlib"; echo
		exit 1
	fi
fi

cd build

if ( ../$NEWLIB/configure --target=$TARGET --prefix=$OUT --enable-interwork \
     --enable-multilib --with-gnu-as --with-gnu-ld --disable-nls ) then
	echo -n
else
	echo; echo "Error: Cannot configure newlib"; echo
	exit 1
fi

if ( make ) then
	echo -n
else
	echo; echo "Error: Cannot make newlib"; echo
	exit 1
fi

if ( make install ) then
	echo -n
else
	echo; echo "Error: Cannot install newlib"; echo
	exit 1
fi

cd ..
rm -rf build/*



rm -rf build
